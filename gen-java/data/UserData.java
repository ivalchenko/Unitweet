/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserData implements org.apache.thrift.TBase<UserData, UserData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserData");

  private static final org.apache.thrift.protocol.TField LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("login", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FIRSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SECONDNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("secondname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IMAGE_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("imageLink", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FOLLOWERS_FIELD_DESC = new org.apache.thrift.protocol.TField("followers", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FOLLOWING_FIELD_DESC = new org.apache.thrift.protocol.TField("following", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserDataTupleSchemeFactory());
  }

  public String login; // required
  public String firstname; // required
  public String secondname; // required
  public String imageLink; // required
  public int followers; // required
  public int following; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOGIN((short)1, "login"),
    FIRSTNAME((short)2, "firstname"),
    SECONDNAME((short)3, "secondname"),
    IMAGE_LINK((short)4, "imageLink"),
    FOLLOWERS((short)5, "followers"),
    FOLLOWING((short)6, "following");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOGIN
          return LOGIN;
        case 2: // FIRSTNAME
          return FIRSTNAME;
        case 3: // SECONDNAME
          return SECONDNAME;
        case 4: // IMAGE_LINK
          return IMAGE_LINK;
        case 5: // FOLLOWERS
          return FOLLOWERS;
        case 6: // FOLLOWING
          return FOLLOWING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FOLLOWERS_ISSET_ID = 0;
  private static final int __FOLLOWING_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOGIN, new org.apache.thrift.meta_data.FieldMetaData("login", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIRSTNAME, new org.apache.thrift.meta_data.FieldMetaData("firstname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECONDNAME, new org.apache.thrift.meta_data.FieldMetaData("secondname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_LINK, new org.apache.thrift.meta_data.FieldMetaData("imageLink", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOLLOWERS, new org.apache.thrift.meta_data.FieldMetaData("followers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.FOLLOWING, new org.apache.thrift.meta_data.FieldMetaData("following", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserData.class, metaDataMap);
  }

  public UserData() {
  }

  public UserData(
    String login,
    String firstname,
    String secondname,
    String imageLink,
    int followers,
    int following)
  {
    this();
    this.login = login;
    this.firstname = firstname;
    this.secondname = secondname;
    this.imageLink = imageLink;
    this.followers = followers;
    setFollowersIsSet(true);
    this.following = following;
    setFollowingIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserData(UserData other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetLogin()) {
      this.login = other.login;
    }
    if (other.isSetFirstname()) {
      this.firstname = other.firstname;
    }
    if (other.isSetSecondname()) {
      this.secondname = other.secondname;
    }
    if (other.isSetImageLink()) {
      this.imageLink = other.imageLink;
    }
    this.followers = other.followers;
    this.following = other.following;
  }

  public UserData deepCopy() {
    return new UserData(this);
  }

  @Override
  public void clear() {
    this.login = null;
    this.firstname = null;
    this.secondname = null;
    this.imageLink = null;
    setFollowersIsSet(false);
    this.followers = 0;
    setFollowingIsSet(false);
    this.following = 0;
  }

  public String getLogin() {
    return this.login;
  }

  public UserData setLogin(String login) {
    this.login = login;
    return this;
  }

  public void unsetLogin() {
    this.login = null;
  }

  /** Returns true if field login is set (has been assigned a value) and false otherwise */
  public boolean isSetLogin() {
    return this.login != null;
  }

  public void setLoginIsSet(boolean value) {
    if (!value) {
      this.login = null;
    }
  }

  public String getFirstname() {
    return this.firstname;
  }

  public UserData setFirstname(String firstname) {
    this.firstname = firstname;
    return this;
  }

  public void unsetFirstname() {
    this.firstname = null;
  }

  /** Returns true if field firstname is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstname() {
    return this.firstname != null;
  }

  public void setFirstnameIsSet(boolean value) {
    if (!value) {
      this.firstname = null;
    }
  }

  public String getSecondname() {
    return this.secondname;
  }

  public UserData setSecondname(String secondname) {
    this.secondname = secondname;
    return this;
  }

  public void unsetSecondname() {
    this.secondname = null;
  }

  /** Returns true if field secondname is set (has been assigned a value) and false otherwise */
  public boolean isSetSecondname() {
    return this.secondname != null;
  }

  public void setSecondnameIsSet(boolean value) {
    if (!value) {
      this.secondname = null;
    }
  }

  public String getImageLink() {
    return this.imageLink;
  }

  public UserData setImageLink(String imageLink) {
    this.imageLink = imageLink;
    return this;
  }

  public void unsetImageLink() {
    this.imageLink = null;
  }

  /** Returns true if field imageLink is set (has been assigned a value) and false otherwise */
  public boolean isSetImageLink() {
    return this.imageLink != null;
  }

  public void setImageLinkIsSet(boolean value) {
    if (!value) {
      this.imageLink = null;
    }
  }

  public int getFollowers() {
    return this.followers;
  }

  public UserData setFollowers(int followers) {
    this.followers = followers;
    setFollowersIsSet(true);
    return this;
  }

  public void unsetFollowers() {
    __isset_bit_vector.clear(__FOLLOWERS_ISSET_ID);
  }

  /** Returns true if field followers is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowers() {
    return __isset_bit_vector.get(__FOLLOWERS_ISSET_ID);
  }

  public void setFollowersIsSet(boolean value) {
    __isset_bit_vector.set(__FOLLOWERS_ISSET_ID, value);
  }

  public int getFollowing() {
    return this.following;
  }

  public UserData setFollowing(int following) {
    this.following = following;
    setFollowingIsSet(true);
    return this;
  }

  public void unsetFollowing() {
    __isset_bit_vector.clear(__FOLLOWING_ISSET_ID);
  }

  /** Returns true if field following is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowing() {
    return __isset_bit_vector.get(__FOLLOWING_ISSET_ID);
  }

  public void setFollowingIsSet(boolean value) {
    __isset_bit_vector.set(__FOLLOWING_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOGIN:
      if (value == null) {
        unsetLogin();
      } else {
        setLogin((String)value);
      }
      break;

    case FIRSTNAME:
      if (value == null) {
        unsetFirstname();
      } else {
        setFirstname((String)value);
      }
      break;

    case SECONDNAME:
      if (value == null) {
        unsetSecondname();
      } else {
        setSecondname((String)value);
      }
      break;

    case IMAGE_LINK:
      if (value == null) {
        unsetImageLink();
      } else {
        setImageLink((String)value);
      }
      break;

    case FOLLOWERS:
      if (value == null) {
        unsetFollowers();
      } else {
        setFollowers((Integer)value);
      }
      break;

    case FOLLOWING:
      if (value == null) {
        unsetFollowing();
      } else {
        setFollowing((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOGIN:
      return getLogin();

    case FIRSTNAME:
      return getFirstname();

    case SECONDNAME:
      return getSecondname();

    case IMAGE_LINK:
      return getImageLink();

    case FOLLOWERS:
      return Integer.valueOf(getFollowers());

    case FOLLOWING:
      return Integer.valueOf(getFollowing());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOGIN:
      return isSetLogin();
    case FIRSTNAME:
      return isSetFirstname();
    case SECONDNAME:
      return isSetSecondname();
    case IMAGE_LINK:
      return isSetImageLink();
    case FOLLOWERS:
      return isSetFollowers();
    case FOLLOWING:
      return isSetFollowing();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserData)
      return this.equals((UserData)that);
    return false;
  }

  public boolean equals(UserData that) {
    if (that == null)
      return false;

    boolean this_present_login = true && this.isSetLogin();
    boolean that_present_login = true && that.isSetLogin();
    if (this_present_login || that_present_login) {
      if (!(this_present_login && that_present_login))
        return false;
      if (!this.login.equals(that.login))
        return false;
    }

    boolean this_present_firstname = true && this.isSetFirstname();
    boolean that_present_firstname = true && that.isSetFirstname();
    if (this_present_firstname || that_present_firstname) {
      if (!(this_present_firstname && that_present_firstname))
        return false;
      if (!this.firstname.equals(that.firstname))
        return false;
    }

    boolean this_present_secondname = true && this.isSetSecondname();
    boolean that_present_secondname = true && that.isSetSecondname();
    if (this_present_secondname || that_present_secondname) {
      if (!(this_present_secondname && that_present_secondname))
        return false;
      if (!this.secondname.equals(that.secondname))
        return false;
    }

    boolean this_present_imageLink = true && this.isSetImageLink();
    boolean that_present_imageLink = true && that.isSetImageLink();
    if (this_present_imageLink || that_present_imageLink) {
      if (!(this_present_imageLink && that_present_imageLink))
        return false;
      if (!this.imageLink.equals(that.imageLink))
        return false;
    }

    boolean this_present_followers = true;
    boolean that_present_followers = true;
    if (this_present_followers || that_present_followers) {
      if (!(this_present_followers && that_present_followers))
        return false;
      if (this.followers != that.followers)
        return false;
    }

    boolean this_present_following = true;
    boolean that_present_following = true;
    if (this_present_following || that_present_following) {
      if (!(this_present_following && that_present_following))
        return false;
      if (this.following != that.following)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(UserData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UserData typedOther = (UserData)other;

    lastComparison = Boolean.valueOf(isSetLogin()).compareTo(typedOther.isSetLogin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.login, typedOther.login);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstname()).compareTo(typedOther.isSetFirstname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstname, typedOther.firstname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecondname()).compareTo(typedOther.isSetSecondname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecondname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondname, typedOther.secondname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageLink()).compareTo(typedOther.isSetImageLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageLink, typedOther.imageLink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowers()).compareTo(typedOther.isSetFollowers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followers, typedOther.followers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowing()).compareTo(typedOther.isSetFollowing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.following, typedOther.following);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserData(");
    boolean first = true;

    sb.append("login:");
    if (this.login == null) {
      sb.append("null");
    } else {
      sb.append(this.login);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstname:");
    if (this.firstname == null) {
      sb.append("null");
    } else {
      sb.append(this.firstname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secondname:");
    if (this.secondname == null) {
      sb.append("null");
    } else {
      sb.append(this.secondname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageLink:");
    if (this.imageLink == null) {
      sb.append("null");
    } else {
      sb.append(this.imageLink);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("followers:");
    sb.append(this.followers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("following:");
    sb.append(this.following);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserDataStandardSchemeFactory implements SchemeFactory {
    public UserDataStandardScheme getScheme() {
      return new UserDataStandardScheme();
    }
  }

  private static class UserDataStandardScheme extends StandardScheme<UserData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.login = iprot.readString();
              struct.setLoginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIRSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstname = iprot.readString();
              struct.setFirstnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SECONDNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secondname = iprot.readString();
              struct.setSecondnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMAGE_LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageLink = iprot.readString();
              struct.setImageLinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FOLLOWERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.followers = iprot.readI32();
              struct.setFollowersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FOLLOWING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.following = iprot.readI32();
              struct.setFollowingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.login != null) {
        oprot.writeFieldBegin(LOGIN_FIELD_DESC);
        oprot.writeString(struct.login);
        oprot.writeFieldEnd();
      }
      if (struct.firstname != null) {
        oprot.writeFieldBegin(FIRSTNAME_FIELD_DESC);
        oprot.writeString(struct.firstname);
        oprot.writeFieldEnd();
      }
      if (struct.secondname != null) {
        oprot.writeFieldBegin(SECONDNAME_FIELD_DESC);
        oprot.writeString(struct.secondname);
        oprot.writeFieldEnd();
      }
      if (struct.imageLink != null) {
        oprot.writeFieldBegin(IMAGE_LINK_FIELD_DESC);
        oprot.writeString(struct.imageLink);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FOLLOWERS_FIELD_DESC);
      oprot.writeI32(struct.followers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FOLLOWING_FIELD_DESC);
      oprot.writeI32(struct.following);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserDataTupleSchemeFactory implements SchemeFactory {
    public UserDataTupleScheme getScheme() {
      return new UserDataTupleScheme();
    }
  }

  private static class UserDataTupleScheme extends TupleScheme<UserData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLogin()) {
        optionals.set(0);
      }
      if (struct.isSetFirstname()) {
        optionals.set(1);
      }
      if (struct.isSetSecondname()) {
        optionals.set(2);
      }
      if (struct.isSetImageLink()) {
        optionals.set(3);
      }
      if (struct.isSetFollowers()) {
        optionals.set(4);
      }
      if (struct.isSetFollowing()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetLogin()) {
        oprot.writeString(struct.login);
      }
      if (struct.isSetFirstname()) {
        oprot.writeString(struct.firstname);
      }
      if (struct.isSetSecondname()) {
        oprot.writeString(struct.secondname);
      }
      if (struct.isSetImageLink()) {
        oprot.writeString(struct.imageLink);
      }
      if (struct.isSetFollowers()) {
        oprot.writeI32(struct.followers);
      }
      if (struct.isSetFollowing()) {
        oprot.writeI32(struct.following);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.login = iprot.readString();
        struct.setLoginIsSet(true);
      }
      if (incoming.get(1)) {
        struct.firstname = iprot.readString();
        struct.setFirstnameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.secondname = iprot.readString();
        struct.setSecondnameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.imageLink = iprot.readString();
        struct.setImageLinkIsSet(true);
      }
      if (incoming.get(4)) {
        struct.followers = iprot.readI32();
        struct.setFollowersIsSet(true);
      }
      if (incoming.get(5)) {
        struct.following = iprot.readI32();
        struct.setFollowingIsSet(true);
      }
    }
  }

}

