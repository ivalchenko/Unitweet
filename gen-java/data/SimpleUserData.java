/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SimpleUserData implements org.apache.thrift.TBase<SimpleUserData, SimpleUserData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SimpleUserData");

  private static final org.apache.thrift.protocol.TField LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("login", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IMAGE_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("imageLink", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SimpleUserDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SimpleUserDataTupleSchemeFactory());
  }

  public String login; // required
  public String imageLink; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOGIN((short)1, "login"),
    IMAGE_LINK((short)2, "imageLink");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOGIN
          return LOGIN;
        case 2: // IMAGE_LINK
          return IMAGE_LINK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOGIN, new org.apache.thrift.meta_data.FieldMetaData("login", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_LINK, new org.apache.thrift.meta_data.FieldMetaData("imageLink", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SimpleUserData.class, metaDataMap);
  }

  public SimpleUserData() {
  }

  public SimpleUserData(
    String login,
    String imageLink)
  {
    this();
    this.login = login;
    this.imageLink = imageLink;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SimpleUserData(SimpleUserData other) {
    if (other.isSetLogin()) {
      this.login = other.login;
    }
    if (other.isSetImageLink()) {
      this.imageLink = other.imageLink;
    }
  }

  public SimpleUserData deepCopy() {
    return new SimpleUserData(this);
  }

  @Override
  public void clear() {
    this.login = null;
    this.imageLink = null;
  }

  public String getLogin() {
    return this.login;
  }

  public SimpleUserData setLogin(String login) {
    this.login = login;
    return this;
  }

  public void unsetLogin() {
    this.login = null;
  }

  /** Returns true if field login is set (has been assigned a value) and false otherwise */
  public boolean isSetLogin() {
    return this.login != null;
  }

  public void setLoginIsSet(boolean value) {
    if (!value) {
      this.login = null;
    }
  }

  public String getImageLink() {
    return this.imageLink;
  }

  public SimpleUserData setImageLink(String imageLink) {
    this.imageLink = imageLink;
    return this;
  }

  public void unsetImageLink() {
    this.imageLink = null;
  }

  /** Returns true if field imageLink is set (has been assigned a value) and false otherwise */
  public boolean isSetImageLink() {
    return this.imageLink != null;
  }

  public void setImageLinkIsSet(boolean value) {
    if (!value) {
      this.imageLink = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOGIN:
      if (value == null) {
        unsetLogin();
      } else {
        setLogin((String)value);
      }
      break;

    case IMAGE_LINK:
      if (value == null) {
        unsetImageLink();
      } else {
        setImageLink((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOGIN:
      return getLogin();

    case IMAGE_LINK:
      return getImageLink();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOGIN:
      return isSetLogin();
    case IMAGE_LINK:
      return isSetImageLink();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SimpleUserData)
      return this.equals((SimpleUserData)that);
    return false;
  }

  public boolean equals(SimpleUserData that) {
    if (that == null)
      return false;

    boolean this_present_login = true && this.isSetLogin();
    boolean that_present_login = true && that.isSetLogin();
    if (this_present_login || that_present_login) {
      if (!(this_present_login && that_present_login))
        return false;
      if (!this.login.equals(that.login))
        return false;
    }

    boolean this_present_imageLink = true && this.isSetImageLink();
    boolean that_present_imageLink = true && that.isSetImageLink();
    if (this_present_imageLink || that_present_imageLink) {
      if (!(this_present_imageLink && that_present_imageLink))
        return false;
      if (!this.imageLink.equals(that.imageLink))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SimpleUserData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SimpleUserData typedOther = (SimpleUserData)other;

    lastComparison = Boolean.valueOf(isSetLogin()).compareTo(typedOther.isSetLogin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.login, typedOther.login);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageLink()).compareTo(typedOther.isSetImageLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageLink, typedOther.imageLink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SimpleUserData(");
    boolean first = true;

    sb.append("login:");
    if (this.login == null) {
      sb.append("null");
    } else {
      sb.append(this.login);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageLink:");
    if (this.imageLink == null) {
      sb.append("null");
    } else {
      sb.append(this.imageLink);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SimpleUserDataStandardSchemeFactory implements SchemeFactory {
    public SimpleUserDataStandardScheme getScheme() {
      return new SimpleUserDataStandardScheme();
    }
  }

  private static class SimpleUserDataStandardScheme extends StandardScheme<SimpleUserData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SimpleUserData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.login = iprot.readString();
              struct.setLoginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IMAGE_LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageLink = iprot.readString();
              struct.setImageLinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SimpleUserData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.login != null) {
        oprot.writeFieldBegin(LOGIN_FIELD_DESC);
        oprot.writeString(struct.login);
        oprot.writeFieldEnd();
      }
      if (struct.imageLink != null) {
        oprot.writeFieldBegin(IMAGE_LINK_FIELD_DESC);
        oprot.writeString(struct.imageLink);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SimpleUserDataTupleSchemeFactory implements SchemeFactory {
    public SimpleUserDataTupleScheme getScheme() {
      return new SimpleUserDataTupleScheme();
    }
  }

  private static class SimpleUserDataTupleScheme extends TupleScheme<SimpleUserData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SimpleUserData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLogin()) {
        optionals.set(0);
      }
      if (struct.isSetImageLink()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLogin()) {
        oprot.writeString(struct.login);
      }
      if (struct.isSetImageLink()) {
        oprot.writeString(struct.imageLink);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SimpleUserData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.login = iprot.readString();
        struct.setLoginIsSet(true);
      }
      if (incoming.get(1)) {
        struct.imageLink = iprot.readString();
        struct.setImageLinkIsSet(true);
      }
    }
  }

}

